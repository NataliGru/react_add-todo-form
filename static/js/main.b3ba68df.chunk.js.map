{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","getUserById","userId","usersFromServer","find","todosWithUser","App","useState","currentTodos","setCurrentTodos","setTitle","titleError","setTitleError","selectedUserId","setSelectedUserId","userIdError","setUserIdError","onSubmit","event","preventDefault","trim","length","newTodo","previousTodos","addTodos","Math","max","htmlFor","value","onChange","target","placeholder","type","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3ba68df.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = (\n  { user: { name, email } },\n) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = (\n  {\n    todo: {\n      id, completed, title, user,\n    },\n  },\n) => (\n  <article\n    data-id={id}\n    className={classNames('TodoInfo',\n      { 'TodoInfo--completed': completed })}\n  >\n    <h2 className=\"TodoInfo__title\">{title}</h2>\n\n    {user && <UserInfo user={user} />}\n  </article>\n);\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number) => (\n  usersFromServer.find(({ id }) => (\n    userId === id)\n    || null)\n);\n\nconst todosWithUser: Todo[] = todosFromServer.map(todo => (\n  {\n    ...todo,\n    user: getUserById(todo.userId),\n  }\n));\n\nexport const App = () => {\n  const [currentTodos, setCurrentTodos] = useState(todosWithUser);\n\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const getMaxId = () => (\n    Math.max(...currentTodos.map((todo) => todo.id))\n  );\n\n  const addTodos = (newTodo: Todo) => {\n    setCurrentTodos(\n      previousTodos => [...previousTodos, newTodo],\n    );\n  };\n\n  const reset = () => {\n    setSelectedUserId(0);\n    setUserIdError(false);\n    setTitle('');\n    setTitleError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setUserIdError(!selectedUserId);\n    setTitleError(!title.trim().length);\n\n    if (!selectedUserId || !title.trim().length) {\n      return;\n    }\n\n    if (!titleError && !userIdError) {\n      const newTodo: Todo = {\n        id: getMaxId() + 1,\n        title: title.trim(),\n        completed: false,\n        userId: selectedUserId,\n        user: getUserById(selectedUserId),\n      };\n\n      addTodos(newTodo);\n      reset();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            value={title}\n            onChange={event => {\n              setTitle(event.target.value);\n              setTitleError(false);\n            }}\n            placeholder=\"Enter a title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n          />\n\n          {titleError\n            && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => {\n              setSelectedUserId(+event.target.value);\n              setUserIdError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userIdError\n            && (<span className=\"error\">Please choose a user</span>)}\n\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}